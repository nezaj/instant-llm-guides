---
description: How to add permissions and authorization with InstantDB
globs: 
alwaysApply: false
---
# How to write permissions

Define access controls using Google's CEL expression language.

## Core Operations
- **view**: Read access (queries)
- **create**: Create new entities
- **update**: Modify existing entities
- **delete**: Remove entities

## Default Behavior
All permissions default to `true` (unrestricted).

```typescript
// These are equivalent:
{} // Empty rules
{ todos: { allow: {} } } // No rules specified
{ todos: { allow: { view: "true", create: "true", update: "true", delete: "true" } } }
```

## Key Features

### `$default` for Namespace Defaults
```typescript
{
  todos: {
    allow: {
      $default: "false",      // Deny all by default
      view: "auth.id != null" // Explicitly allow viewing
    }
  }
}
```

### `auth` and `data` Objects
- `auth`: Current authenticated user
- `data`: Current entity being accessed

```typescript
{
  todos: {
    allow: {
      view: "auth.id != null",
      update: "auth.id == data.ownerId"
    }
  }
}
```

### `bind` for Reusable Logic
```typescript
{
  todos: {
    allow: {
      view: "isLoggedIn",
      $default: "isOwner || isAdmin"
    },
    bind: [
      "isLoggedIn", "auth.id != null",
      "isOwner", "isLoggedIn && auth.id == data.ownerId",
      "isAdmin", "isLoggedIn && auth.email in ['admin@example.com']"
    ]
  }
}
```

### `data.ref` for Linked Data
Returns CEL list - use `in` operator or index `[0]` for single values.

```typescript
// ✅ Correct
"update": "auth.id in data.ref('post.author.id')"
"view": "auth.id == data.ref('owner.id')[0]"
"view": "size(data.ref('owner.id')) > 0"

// ❌ Wrong
"update": "auth.id == data.ref('post.author.id')"  // Always returns list
"view": "data.ref('owner')"                        // Must specify attribute
"view": "data.ref('owner.id') != null"            // Check against [] not null
```

### `auth.ref` for User's Linked Data
Must use `$user` prefix.

```typescript
// ✅ Correct
"create": "'admin' in auth.ref('$user.role.type')"
"create": "auth.ref('$user.role.type')[0] == 'admin'"

// ❌ Wrong
"create": "'admin' in auth.ref('role.type')"  // Missing $user prefix
```

### `newData` for Update Comparisons
```typescript
{
  posts: {
    allow: {
      // Authors can update but not change published status
      update: "auth.id == data.authorId && newData.isPublished == data.isPublished"
    }
  }
}
```

### `ruleParams` for Non-Auth Permissions
```typescript
// app/page.tsx
const docId = new URLSearchParams(window.location.search).get("docId");
const { data } = db.useQuery({ docs: {} }, { ruleParams: { docId } });

db.transact(
  db.tx.docs[docId].ruleParams({ docId }).update({ title: 'eat' })
);

// instant.perms.ts
{
  documents: {
    allow: {
      view: "data.id == ruleParams.docId",
      update: "data.id == ruleParams.docId"
    }
  }
}
```

## Complete Examples

### Blog Platform
```typescript
// instant.perms.ts
{
  posts: {
    allow: {
      view: "data.isPublished || isAuthor",
      create: "auth.id != null && isAuthor",
      update: "isAuthor || isAdmin",
      delete: "isAuthor || isAdmin"
    },
    bind: [
      "isAuthor", "auth.id == data.authorId",
      "isAdmin", "auth.ref('$user.role')[0] == 'admin'"
    ]
  },
  comments: {
    allow: {
      view: "true",
      create: "isCommentAuthor",
      update: "isCommentAuthor",
      delete: "isCommentAuthor || isPostAuthor || isAdmin"
    },
    bind: [
      "isLoggedIn", "auth.id != null",
      "isPostAuthor", "isLoggedIn && auth.id == data.ref('post.authorId')[0]",
      "isCommentAuthor", "isLoggedIn && auth.id == data.authorId",
      "isAdmin", "auth.ref('$user.role')[0] == 'admin'"
    ]
  }
}
```

### Todo App
```typescript
// instant.perms.ts
{
  todos: {
    allow: {
      view: "isOwner || isShared",
      create: "isOwner",
      update: "isOwner || (isShared && data.ownerId == newData.ownerId)",
      delete: "isOwner"
    },
    bind: [
      "isLoggedIn", "auth.id != null",
      "isOwner", "isLoggedIn && auth.id == data.ownerId",
      "isShared", "isLoggedIn && auth.id in data.ref('sharedWith.id')"
    ]
  },
  lists: {
    allow: {
      $default: "isOwner",
      view: "isOwner || isCollaborator"
    },
    bind: [
      "isLoggedIn", "auth.id != null",
      "isOwner", "isLoggedIn && auth.id == data.ownerId",
      "isCollaborator", "isLoggedIn && auth.id in data.ref('collaborators.id')"
    ]
  }
}
```

## Common Mistakes
- Not using `data.ref` for linked data
- Missing attribute in `data.ref('owner')` → `data.ref('owner.id')`
- Using `==` with lists instead of `in` operator
- Missing `$user` prefix with `auth.ref`
- Checking `data.ref` against `null` instead of `[]`
- Using `newData.ref` (doesn't exist)
- Non-literal strings in ref: `data.ref(var + '.id')` → `data.ref('team.id')`

