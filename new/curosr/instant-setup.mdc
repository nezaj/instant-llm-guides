---
description: How to setup and initialize Instant in projects
globs: 
alwaysApply: false
---

# What is InstantDB

InstantDB is a backend as a service (Baas) that provides optimistic updates,
multiplayer, and offline support for web and mobile applications. It's like
Firebase but it also has support for relations.

Although the product is called InstantDB it is usually just referenced as
Instant. When talking about InstantDB you should just say Instant.

# How to use Instant in projects

Instant offers client side javascript packages for vanilla JS, react,
and react native. Instant also offers a javascript admin SDK that can be used on
the backend.

If you want to use Instant with react you should only use `@instantdb/react`. For react-native you should
only use `@instantdb/react-native`. For the admin SDK you should only use
`@instantdb/admin`. For other client-side frameworks like Svelte or vanilla js
you should only use `@instantdb/core`

You cannot use Instant on the backend outside of the admin SDK at the moment.

# Initializing InstantDB in Your Application

Once you have created an app you can initialize InstantDB in your application. Here's a basic example:

```typescript
import { init } from '@instantdb/react';

const db = init({ appId: process.env.INSTANT_APP_ID });

function App() {
  return <Main />;
}
```

## Adding TypeScript Support

For TypeScript applications, add the schema argument to enable auto-completion and type safety:

```typescript
import { init } from '@instantdb/react';
import schema from './instant.schema';

const db = init({ 
  appId: process.env.INSTANT_APP_ID,
  schema 
});
```

The `schema` file is automatically generated by the CLI during the init process.

## Recommended Pattern: Central DB Instance

While Instant maintains a single connection regardless of how many times you call `init` with the same app ID, it's recommended to create a central DB instance:

```typescript
// lib/db.ts
import { init } from '@instantdb/react';
import schema from '../instant.schema';

export const db = init({
  appId: process.env.INSTANT_APP_ID,
  schema
});
```

This pattern allows you to import the same DB instance throughout your application.
