---
description: How to upload and manage files with InstantDB Storage
globs: 
alwaysApply: false
---
# InstantDB Storage Guide

This guide explains how to use InstantDB Storage to easily upload, manage, and serve files in your applications.

## Core Concepts

InstantDB Storage allows you to:

- Upload files (images, videos, documents, etc.)
- Retrieve file metadata and download URLs
- Delete files
- Link files to other entities in your data model
- Secure files with permissions

Files are stored in a special `$files` namespace that automatically updates when files are added, modified, or removed.

## Complete Example: Image Gallery

Here's a complete example of an image gallery with upload, display, and delete functionality:

```tsx
import React, { useState, useRef } from 'react';
import { init, InstaQLEntity } from '@instantdb/react';
import schema, { AppSchema } from './instant.schema';

// Initialize InstantDB
const db = init({ 
  appId: process.env.NEXT_PUBLIC_INSTANT_APP_ID!,
  schema 
});

type InstantFile = InstaQLEntity<AppSchema, '$files'>;

function ImageGallery() {
  const [uploading, setUploading] = useState(false);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  // Query all image files
  const { isLoading, error, data } = db.useQuery({
    $files: {
      $: {
        where: {
          path: { 
            $like: '%.jpg' 
          }
        },
        order: { 
          serverCreatedAt: 'desc' 
        }
      }
    }
  });
  
  // Handle file selection
  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setSelectedFile(file);
      const objectUrl = URL.createObjectURL(file);
      setPreviewUrl(objectUrl);
    }
  };
  
  // Upload the selected file
  const handleUpload = async () => {
    if (!selectedFile) return;
    
    setUploading(true);
    try {
      await db.storage.uploadFile(selectedFile.name, selectedFile, {
        contentType: selectedFile.type
      });
      
      // Reset state
      setSelectedFile(null);
      if (previewUrl) {
        URL.revokeObjectURL(previewUrl);
        setPreviewUrl(null);
      }
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    } catch (error) {
      console.error('Upload failed:', error);
      alert('Failed to upload image. Please try again.');
    } finally {
      setUploading(false);
    }
  };
  
  // Delete an image
  const handleDelete = async (file: InstantFile) => {
    if (!confirm(`Are you sure you want to delete ${file.path}?`)) {
      return;
    }
    
    try {
      await db.storage.delete(file.path);
    } catch (error) {
      console.error('Delete failed:', error);
      alert('Failed to delete image. Please try again.');
    }
  };
  
  if (isLoading) {
    return <div className="loading">Loading gallery...</div>;
  }
  
  if (error) {
    return <div className="error">Error: {error.message}</div>;
  }
  
  const { $files: images } = data;
  
  return (
    <div className="image-gallery-container">
      <h1>Image Gallery</h1>
      
      {/* Upload Section */}
      <div className="upload-section">
        <input
          type="file"
          ref={fileInputRef}
          accept="image/jpeg,image/png,image/gif"
          onChange={handleFileSelect}
          disabled={uploading}
        />
        
        {previewUrl && (
          <div className="preview">
            <img src={previewUrl} alt="Preview" />
          </div>
        )}
        
        <button
          onClick={handleUpload}
          disabled={!selectedFile || uploading}
          className="upload-button"
        >
          {uploading ? 'Uploading...' : 'Upload Image'}
        </button>
      </div>
      
      {/* Gallery Section */}
      <div className="gallery">
        {images.length === 0 ? (
          <p>No images yet. Upload some!</p>
        ) : (
          <div className="image-grid">
            {images.map(image => (
              <div key={image.id} className="image-item">
                <img src={image.url} alt={image.path} />
                <div className="image-overlay">
                  <span className="image-name">{image.path.split('/').pop()}</span>
                  <button
                    onClick={() => handleDelete(image)}
                    className="delete-button"
                  >
                    Delete
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}

export default ImageGallery;
```

## Linking Files to Other Entities

Files can be associated with other entities in your data model. This is useful for features like profile pictures, post attachments, etc.

```typescript
// ✅ Good: Upload and link a profile avatar
async function uploadAvatar(profileId: string, file: File) {
  try {
    // 1. Upload the file
    const path = `profiles/${profileId}/avatar.jpg`;
    const { data } = await db.storage.uploadFile(path, file, {
      contentType: 'image/jpeg'
    });
    
    // 2. Link the file to the profile
    await db.transact(
      db.tx.profiles[profileId].link({ avatar: data.id })
    );
    
    console.log('Avatar uploaded and linked successfully');
  } catch (error) {
    console.error('Failed to upload avatar:', error);
  }
}

// ✅ Good: Upload multiple attachments to a post
async function addPostAttachments(postId: string, files: File[]) {
  try {
    // Process each file
    const fileIds = await Promise.all(
      files.map(async (file, index) => {
        const path = `posts/${postId}/attachment-${index}.${file.name.split('.').pop()}`;
        const { data } = await db.storage.uploadFile(path, file);
        return data.id;
      })
    );
    
    // Link all files to the post
    await db.transact(
      db.tx.posts[postId].link({ attachments: fileIds })
    );
    
    console.log(`${fileIds.length} attachments added to post`);
  } catch (error) {
    console.error('Failed to add attachments:', error);
  }
}
```

### Query Linked Files

```typescript
// ✅ Good: Query profiles with their avatars
function ProfileList() {
  const { isLoading, error, data } = db.useQuery({
    profiles: {
      avatar: {},
    }
  });
  
  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error: {error.message}</div>;
  
  const { profiles } = data;
  
  return (
    <div className="profiles">
      {profiles.map(profile => (
        <div key={profile.id} className="profile-card">
          {profile.avatar ? (
            <img 
              src={profile.avatar.url} 
              alt={`${profile.name}'s avatar`} 
              className="avatar"
            />
          ) : (
            <div className="avatar-placeholder">No Avatar</div>
          )}
          <h3>{profile.name}</h3>
          <p>{profile.bio}</p>
        </div>
      ))}
    </div>
  );
}

// ✅ Good: Query a post with its attachments
function PostDetails({ postId }: { postId: string }) {
  const { isLoading, error, data } = db.useQuery({
    posts: {
      $: { where: { id: postId } },
      attachments: {},
    }
  });
  
  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error: {error.message}</div>;
  
  const post = data.posts[0];
  if (!post) return <div>Post not found</div>;
  
  return (
    <div className="post">
      <h1>{post.title}</h1>
      <div className="content">{post.content}</div>
      
      {post.attachments && post.attachments.length > 0 && (
        <div className="attachments">
          <h2>Attachments ({post.attachments.length})</h2>
          <div className="attachment-list">
            {post.attachments.map(file => (
              <a 
                key={file.id} 
                href={file.url} 
                target="_blank" 
                rel="noopener noreferrer"
                className="attachment-item"
              >
                {file.path.split('/').pop()}
              </a>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}
```

## Permissions for File Storage

`data.path.startsWith` is a useful pattern for writing permissions for `$files`

```typescript
// ✅ Good: Users can only access their own files
const rules = {
  "$files": {
    "allow": {
      "view": "isOwner || isAdmin",
      "create": "isOwner",
      "delete": "isOwner || isAdmin"
    },
    "bind": [
      "isOwner", "data.path.startsWith('users/' + auth.id + '/')",
      "isAdmin", "auth.ref('$user.role') == 'admin'"
    ]
  }
} satisfies InstantRules;
```

## Using Storage with React Native

For React Native applications, you'll need to convert files to a format compatible with InstantDB's storage:

```typescript
// ✅ Good: Upload from React Native
import * as FileSystem from 'expo-file-system';
import { init } from '@instantdb/react-native';
import schema from '../instant.schema';

const db = init({ appId: process.env.EXPO_PUBLIC_INSTANT_APP_ID, schema });

async function uploadFromReactNative(localFilePath: string, uploadPath: string) {
  try {
    // Check if file exists
    const fileInfo = await FileSystem.getInfoAsync(localFilePath);
    if (!fileInfo.exists) {
      throw new Error(`File does not exist at: ${localFilePath}`);
    }
    
    // Convert to a File object
    const response = await fetch(fileInfo.uri);
    const blob = await response.blob();
    
    // Determine file type from extension or use a default
    const extension = localFilePath.split('.').pop()?.toLowerCase();
    let contentType = 'application/octet-stream';
    
    // Set appropriate content type based on extension
    if (extension === 'jpg' || extension === 'jpeg') contentType = 'image/jpeg';
    else if (extension === 'png') contentType = 'image/png';
    else if (extension === 'pdf') contentType = 'application/pdf';
    // Add more types as needed
    
    const file = new File([blob], uploadPath.split('/').pop() || 'file', { 
      type: contentType 
    });
    
    // Upload the file
    await db.storage.uploadFile(uploadPath, file, { contentType });
    console.log('File uploaded successfully!');
    return true;
  } catch (error) {
    console.error('Error uploading file:', error);
    return false;
  }
}
```

## File Organization

Uploading to the same path will overwrite files. Use organized file patterns to
correctly update user, project, and application-wide assets

```typescript
// ✅ Good: Organized file paths
// For user-specific files
const userFilePath = `users/${userId}/profile-picture.jpg`;

// For project-based files
const projectFilePath = `projects/${projectId}/documents/${documentId}.pdf`;

// For application-wide files
const publicFilePath = `public/logos/company-logo.png`;
```

## Best Practices

- Make sure permissions are set for uploads to succeed
- Use organized path based permissions
- Validate image sizes and use compression for performance
- Use proper error handling to debug upload errors
- Links to `$files` must be defined with `$files` in the **reverse** direction, similar to `$users`
